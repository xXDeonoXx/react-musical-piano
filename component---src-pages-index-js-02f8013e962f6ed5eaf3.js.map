{"version":3,"sources":["webpack:///./node_modules/sample-player/lib/midi.js","webpack:///./node_modules/sample-player/lib/notes.js","webpack:///./node_modules/sample-player/lib/scheduler.js","webpack:///./node_modules/sample-player/lib/events.js","webpack:///./node_modules/soundfont-player/lib/legacy.js","webpack:///./node_modules/soundfont-player/lib/index.js","webpack:///./node_modules/audio-loader/lib/index.js","webpack:///./src/components/PianoKey.js","webpack:///./src/functions/AudioPlayer.js","webpack:///./src/pages/index.js","webpack:///./node_modules/sample-player/lib/index.js","webpack:///./node_modules/midimessage/dist/index.min.js","webpack:///./node_modules/adsr/index.js","webpack:///./node_modules/audio-loader/lib/fetch.js","webpack:///./node_modules/sample-player/node_modules/note-parser/index.js","webpack:///./node_modules/sample-player/lib/player.js","webpack:///./node_modules/note-parser/index.js","webpack:///./node_modules/audio-loader/lib/base64.js"],"names":["midimessage","module","exports","player","listenToMidi","input","options","started","opts","gain","vel","onmidimessage","msg","mm","messageType","velocity","channel","key","play","stop","note","toMidi","n","isMidi","midi","buffers","map","toKey","mapper","name","Object","keys","reduce","mapped","mapBuffers","start","when","dec","Math","floor","assign","cents","isArr","Array","isArray","OPTS","schedule","time","events","t","o","now","context","currentTime","emit","event","isObj","chain","fn1","fn2","a","b","c","d","on","cb","arguments","length","prop","old","parser","Soundfont","ctx","nameToUrl","console","warn","log","this","instruments","promises","oscillatorPlayer","defaultOptions","duration","freq","midiToFreq","destination","vcoType","vco","createOscillator","type","frequency","value","vca","createGain","connect","prototype","onready","callback","Promise","all","then","instrument","inst","promise","push","loadBuffers","ac","noteToMidi","load","isSoundfontURL","test","sf","format","isUrl","toUrl","url","soundfont","only","notes","p","window","base64","fetch","fromRegex","r","prefix","pre","source","defVal","loader","ArrayBuffer","loadArrayBuffer","isAudioFileName","loadAudioFile","isPromise","loadPromise","loadArrayData","isObject","loadObjectData","isJsonFileName","loadJsonFile","isBase64Audio","loadBase64Audio","isJsFileName","loadMidiJSFile","resolve","reject","array","done","decodeAudioData","buffer","slice","from","data","obj","dest","indexOf","audio","JSON","parse","i","decode","midiJsToJson","begin","Error","end","lastIndexOf","loadAudio","PianoKey","black","tone","id","playOnKey","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","addEventListener","removeEventListener","useKeyPress","keyCode","playSound","playNote","parseInt","onClick","className","NullSoundFontPlayerNoteAudio","NullSoundFontPlayer","AudioPlayer","audioContext","AudioContext","soundPlayer","setInstrument","instrumentName","SoundFontPlayer","soundfontPlayer","catch","e","Home","props","size","setSize","setTone","audioPlayer","document","onChange","target","generateKeyboard","scheduler","SamplePlayer","s","h","code","call","1","defineProperty","_event","_data","receivedTime","_messageCode","pressure","controllerNumber","controllerValue","channelModeMessage","program","pitchBend","node","voltage","_voltage","createBufferSource","createBuffer","sampleRate","getChannelData","set","flat","loop","getVoltage","scale","startValue","endValue","_startAmount","_endAmount","_multiplier","defineProperties","attack","writable","decay","sustain","release","getReleaseDuration","at","startAmount","endAmount","_decayFrom","_startedAt","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","setTargetAtTime","getTimeConstant","isTarget","endTime","expFalloff","valueAtTime","fromTime","toTime","getValue","onended","get","Float32Array","req","XMLHttpRequest","responseType","open","onload","status","response","statusText","onerror","send","REGEX","SEMITONES","str","isTonic","tuning","m","exec","letter","toUpperCase","acc","replace","pc","step","charCodeAt","alt","chroma","oct","tonicOf","pow","regex","forEach","src","ADSR","EMPTY","DEFAULTS","loopStart","loopEnd","isNum","x","PARAMS","connected","nextId","tracked","out","AudioBuffer","max","createNode","disconnect","env","track","ids","onevent","fn","adsr","envelope","playbackRate","stopAt","fillStr","num","join","pos","build","charAt","octStr","isDef","sBase64","nBlocksSize","nMod3","nMod4","nChr","sB64Enc","nInLen","nOutLen","ceil","taBytes","Uint8Array","nUint24","nOutIdx","nInIdx"],"mappings":"gFAAA,IAAIA,EAAc,EAAQ,QAE1BC,EAAOC,QAAU,SAAUC,GAwDzB,OArCAA,EAAOC,aAAe,SAAUC,EAAOC,GACrC,IAAIC,EAAU,GACVC,EAAOF,GAAW,GAElBG,EAAOD,EAAKC,MAAQ,SAAUC,GAChC,OAAOA,EAAM,KA6Bf,OA1BAL,EAAMM,cAAgB,SAAUC,GAC9B,IAAIC,EAAKD,EAAIE,YAAcF,EAAMZ,EAAYY,GAM7C,GAJuB,WAAnBC,EAAGC,aAA4C,IAAhBD,EAAGE,WACpCF,EAAGC,YAAc,YAGfN,EAAKQ,SAAWH,EAAGG,UAAYR,EAAKQ,QAExC,OAAQH,EAAGC,aACT,IAAK,SACHP,EAAQM,EAAGI,KAAOd,EAAOe,KAAKL,EAAGI,IAAK,EAAG,CACvCR,KAAMA,EAAKI,EAAGE,YAEhB,MAEF,IAAK,UACCR,EAAQM,EAAGI,OACbV,EAAQM,EAAGI,KAAKE,cACTZ,EAAQM,EAAGI,QAOnBd,GAGFA,I,oCCxDT,IAAIiB,EAAO,EAAQ,QAMfC,EAAS,SAAgBC,GAC3B,OALW,SAAgBA,GAC3B,OAAa,OAANA,GAAcA,IAAM,IAAMA,GAAK,GAAKA,EAAI,IAIxCC,CAAOD,IAAMA,EAAIF,EAAKI,KAAKF,IAIpCrB,EAAOC,QAAU,SAAUC,GACzB,GAAIA,EAAOsB,QAAS,CAClB,IAAIC,EAAMvB,EAAOK,KAAKkB,IAClBC,EAAuB,mBAARD,EAAqBA,EAAML,EAE1CO,EAAS,SAAgBC,GAC3B,OAAOA,EAAOF,EAAME,IAASA,EAAO,MAGtC1B,EAAOsB,QAqBX,SAAoBA,EAASE,GAC3B,OAAOG,OAAOC,KAAKN,GAASO,QAAO,SAAUC,EAAQJ,GAEnD,OADAI,EAAON,EAAME,IAASJ,EAAQI,GACvBI,IACN,IAzBgBC,CAAW/B,EAAOsB,QAASG,GAC5C,IAAIO,EAAQhC,EAAOgC,MAEnBhC,EAAOgC,MAAQ,SAAUN,EAAMO,EAAM9B,GACnC,IAAIW,EAAMW,EAAOC,GACbQ,EAAMpB,EAAM,EAShB,OAPIoB,IACFpB,EAAMqB,KAAKC,MAAMtB,GACjBX,EAAUwB,OAAOU,OAAOlC,GAAW,GAAI,CACrCmC,MAAOH,KAAKC,MAAY,IAANF,MAIfF,EAAMlB,EAAKmB,EAAM9B,IAI5B,OAAOH,I,kCCtCT,IAAIuC,EAAQC,MAAMC,QAMdC,EAAO,GAEX5C,EAAOC,QAAU,SAAUC,GAwDzB,OA1BAA,EAAO2C,SAAW,SAAUC,EAAMC,GAChC,IAGIC,EAAGC,EAAG9B,EAAMZ,EAHZ2C,EAAMhD,EAAOiD,QAAQC,YACrBjB,EAAOW,EAAOI,EAAMA,EAAMJ,EAG9B,OAFA5C,EAAOmD,KAAK,WAAYlB,EAAMY,GAEvBA,EAAOtB,KAAI,SAAU6B,GAC1B,OAAKA,GAA4Bb,EAAMa,IACrCN,EAAIM,EAAM,GACVL,EAAIK,EAAM,KAEVN,EAAIM,EAAMR,KACVG,EAAIK,IA/CA,SAAeL,GACzB,OAAOA,GAAkB,iBAANA,EAiDXM,CAAMN,IAIR9B,EAAO8B,EACP1C,EAAOqC,IAJPzB,EAAO8B,EAAErB,MAAQqB,EAAEjC,KAAOiC,EAAE9B,MAAQ8B,EAAE1B,MAAQ,KAC9ChB,EAAO0C,GAMF/C,EAAOgC,MAAMf,EAAMgB,GAAQa,GAAK,GAAIzC,IAhBxB,SAoBhBL,I,mBC3CT,SAASsD,EAAMC,EAAKC,GAClB,OAAO,SAAUC,EAAGC,EAAGC,EAAGC,GACxBL,EAAIE,EAAGC,EAAGC,EAAGC,GACbJ,EAAIC,EAAGC,EAAGC,EAAGC,IA1BjB9D,EAAOC,QAAU,SAAUC,GAoBzB,OARAA,EAAO6D,GAAK,SAAUT,EAAOU,GAC3B,GAAyB,IAArBC,UAAUC,QAAiC,mBAAVZ,EAAsB,OAAOpD,EAAO6D,GAAG,QAAST,GACrF,IAAIa,EAAO,KAAOb,EACdc,EAAMlE,EAAOiE,GAEjB,OADAjE,EAAOiE,GAAQC,EAAMZ,EAAMY,EAAKJ,GAAMA,EAC/B9D,GAGFA,I,kCClBT,IAAImE,EAAS,EAAQ,QAUrB,SAASC,EAAUC,EAAKC,GAGtB,GAFAC,QAAQC,KAAK,gCACbD,QAAQE,IAAI,+EACNC,gBAAgBN,GAAY,OAAO,IAAIA,EAAUC,GACvDK,KAAKJ,UAAYA,GAAaF,EAAUE,UACxCI,KAAKL,IAAMA,EACXK,KAAKC,YAAc,GACnBD,KAAKE,SAAW,GAoFlB,SAASC,EAAiBR,EAAKS,GAE7B,OADAA,EAAiBA,GAAkB,GAC5B,SAAU7D,EAAM2B,EAAMmC,EAAU5E,GACrCoE,QAAQC,KAAK,wCACbD,QAAQE,IAAI,mGACZ,IAAIpD,EAAOJ,EAAO,GAAKA,EAAO,KAAOA,EAAOkD,EAAO9C,KAAKJ,GACpD+D,EAAO3D,EAAO8C,EAAOc,WAAW5D,EAAM,KAAO,KACjD,GAAK2D,EAAL,CACAD,EAAWA,GAAY,GAEvB,IAAIG,GADJ/E,EAAUA,GAAW,IACK+E,aAAeJ,EAAeI,aAAeb,EAAIa,YACvEC,EAAUhF,EAAQgF,SAAWL,EAAeK,SAAW,OACvD7E,EAAOH,EAAQG,MAAQwE,EAAexE,MAAQ,GAC9C8E,EAAMf,EAAIgB,mBACdD,EAAIE,KAAOH,EACXC,EAAIG,UAAUC,MAAQR,EAGtB,IAAIS,EAAMpB,EAAIqB,aAQd,OAPAD,EAAInF,KAAKkF,MAAQlF,EAGjB8E,EAAIO,QAAQF,GACZA,EAAIE,QAAQT,GACZE,EAAIpD,MAAMY,GACNmC,EAAW,GAAGK,EAAIpE,KAAK4B,EAAOmC,GAC3BK,IA3GXhB,EAAUwB,UAAUC,QAAU,SAAUC,GACtCvB,QAAQC,KAAK,kBACbD,QAAQE,IAAI,sHACZsB,QAAQC,IAAItB,KAAKE,UAAUqB,KAAKH,IAGlC1B,EAAUwB,UAAUM,WAAa,SAAUxE,EAAMvB,GAC/CoE,QAAQC,KAAK,+CACbD,QAAQE,IAAI,8CACZ,IAAIJ,EAAMK,KAAKL,IAEf,IADA3C,EAAOA,GAAQ,aACHgD,KAAKC,YAAa,OAAOD,KAAKC,YAAYjD,GACtD,IAAIyE,EAAO,CACTzE,KAAMA,EACNX,KAAM8D,EAAiBR,EAAKlE,IAI9B,GAFAuE,KAAKC,YAAYjD,GAAQyE,EAEZ,YAATzE,EAAoB,CACtB,IAAI0E,EAAUhC,EAAU8B,WAAW7B,EAAK3C,EAAMvB,GAAS8F,MAAK,SAAUC,GAEpE,OADAC,EAAKpF,KAAOmF,EAAWnF,KAChBoF,KAETzB,KAAKE,SAASyB,KAAKD,GAEnBD,EAAKN,QAAU,SAAU/B,GACvBS,QAAQC,KAAK,4DACb4B,EAAQH,KAAKnC,SAGfqC,EAAKN,QAAU,SAAU/B,GACvBS,QAAQC,KAAK,4DACbV,KAIJ,OAAOqC,GAkCT/B,EAAUkC,YARV,SAAqBC,EAAI7E,EAAMvB,GAG7B,OAFAoE,QAAQC,KAAK,uCACbD,QAAQE,IAAI,4EACLL,EAAU8B,WAAWK,EAAI7E,EAAMvB,GAAS8F,MAAK,SAAUE,GAC5D,OAAOA,EAAK7E,YAsDhB8C,EAAUoC,WAAarC,EAAO9C,KAC9BvB,EAAOC,QAAUqE,G,kCC7IjB,IAAIqC,EAAO,EAAQ,QAEfzG,EAAS,EAAQ,QAuDrB,SAAS0G,EAAehF,GACtB,MAAO,gBAAgBiF,KAAKjF,GAiB9B,SAAS4C,EAAU5C,EAAMkF,EAAIC,GAG3B,MAAO,gDADPD,EAAY,eAAPA,EAAsBA,EAAK,cAC6B,IAAMlF,EAAO,KAF1EmF,EAAoB,QAAXA,EAAmBA,EAAS,OAEoD,MAK3F,IAAIzC,EAAY,EAAQ,QAExBA,EAAU8B,WA9CV,SAASA,EAAWK,EAAI7E,EAAMvB,GAC5B,GAAyB,IAArB4D,UAAUC,OAAc,OAAO,SAAU7C,EAAG4B,GAC9C,OAAOmD,EAAWK,EAAIpF,EAAG4B,IAE3B,IAAI1C,EAAOF,GAAW,GAClB2G,EAAQzG,EAAKqG,gBAAkBA,EAC/BK,EAAQ1G,EAAKiE,WAAaA,EAC1B0C,EAAMF,EAAMpF,GAAQA,EAAOqF,EAAMrF,EAAMrB,EAAK4G,UAAW5G,EAAKwG,QAChE,OAAOJ,EAAKF,EAAIS,EAAK,CACnBE,KAAM7G,EAAK6G,MAAQ7G,EAAK8G,QACvBlB,MAAK,SAAU3E,GAChB,IAAI8F,EAAIpH,EAAOuG,EAAIjF,EAASjB,GAAMsF,QAAQtF,EAAK6E,YAAc7E,EAAK6E,YAAcqB,EAAGrB,aAGnF,OAFAkC,EAAEJ,IAAMA,EACRI,EAAE1F,KAAOA,EACF0F,MAiCXhD,EAAUE,UAAYA,EACYxE,EAAOC,UAASD,EAAOC,QAAUqE,GAC7C,oBAAXiD,SAAwBA,OAAOjD,UAAYA,I,kCCxFtD,IAAIkD,EAAS,EAAQ,QAEjBC,EAAQ,EAAQ,QAGpB,SAASC,EAAUC,GACjB,OAAO,SAAU1E,GACf,MAAoB,iBAANA,GAAkB0E,EAAEd,KAAK5D,IAK3C,SAAS2E,EAAOC,EAAKjG,GACnB,MAAsB,iBAARiG,EAAmBA,EAAMjG,EAAsB,mBAARiG,EAAqBA,EAAIjG,GAAQA,EAwBxF,SAAS+E,EAAKF,EAAIqB,EAAQzH,EAAS0H,GACjC,IAAIC,EACUF,aAYMG,YAZIC,EAAkBC,EAAgBL,GAAUM,EAkCtE,SAAmBnF,GACjB,OAAOA,GAAuB,mBAAXA,EAAEkD,KAnC+DkC,CAAUP,GAAUQ,EACtG3F,EAAQmF,GAAUS,EAuDtB,SAAkBtF,GAChB,OAAOA,GAAkB,iBAANA,EAxDiBuF,CAASV,GAAUW,EAAiBC,EAAeZ,GAAUa,EAC/FC,EAAcd,GAAUe,EAAkBC,EAAahB,GAAUiB,EAAiB,KAEpF,OAAOf,EAASA,EAAOvB,EAAIqB,EADhBzH,GAAW,IACqB0H,EAAS9B,QAAQ+C,QAAQjB,GAAU9B,QAAQgD,OAAO,qBAAuBnB,EAAS,KAW/H,SAASI,EAAgBzB,EAAIyC,EAAO7I,GAClC,OAAO,IAAI4F,SAAQ,SAAUkD,EAAMF,GACjCxC,EAAG2C,gBAAgBF,GAAO,SAAUG,GAClCF,EAAKE,MACJ,WACDJ,EAAO,4BAA8BC,EAAMI,MAAM,EAAG,IAAM,cAbhE3C,EAAKc,MAAQA,EAmBb,IAAIU,EAAkBT,EAAU,4BAEhC,SAASU,EAAc3B,EAAI7E,EAAMvB,GAC/B,IAAI6G,EAAMU,EAAOvH,EAAQkJ,KAAM3H,GAC/B,OAAO+E,EAAKF,EAAIE,EAAKc,MAAMP,EAAK,eAAgB7G,GAQlD,SAASiI,EAAY7B,EAAIH,EAASjG,GAChC,OAAOiG,EAAQH,MAAK,SAAUT,GAC5B,OAAOiB,EAAKF,EAAIf,EAAOrF,MAO3B,IAAIsC,EAAUD,MAAMC,QAEpB,SAAS4F,EAAc9B,EAAIyC,EAAO7I,GAChC,OAAO4F,QAAQC,IAAIgD,EAAMzH,KAAI,SAAU+H,GACrC,OAAO7C,EAAKF,EAAI+C,EAAMnJ,EAASmJ,OASnC,SAASf,EAAehC,EAAIgD,EAAKpJ,GAC/B,IAAIqJ,EAAO,GACP5E,EAAWjD,OAAOC,KAAK2H,GAAKhI,KAAI,SAAUT,GAC5C,GAAIX,EAAQ+G,OAAuC,IAA/B/G,EAAQ+G,KAAKuC,QAAQ3I,GAAa,OAAO,KAC7D,IAAI0E,EAAQ+D,EAAIzI,GAChB,OAAO2F,EAAKF,EAAIf,EAAOrF,EAASqF,GAAOS,MAAK,SAAUyD,GACpDF,EAAK1I,GAAO4I,QAGhB,OAAO3D,QAAQC,IAAIpB,GAAUqB,MAAK,WAChC,OAAOuD,KAKX,IAAIhB,EAAiBhB,EAAU,mBAE/B,SAASiB,EAAalC,EAAI7E,EAAMvB,GAC9B,IAAI6G,EAAMU,EAAOvH,EAAQkJ,KAAM3H,GAC/B,OAAO+E,EAAKF,EAAIE,EAAKc,MAAMP,EAAK,QAAQf,KAAK0D,KAAKC,OAAQzJ,GAM5D,IAAIuI,EAAgBlB,EAAU,eAE9B,SAASmB,EAAgBpC,EAAIqB,EAAQzH,GACnC,IAAI0J,EAAIjC,EAAO6B,QAAQ,KACvB,OAAOhD,EAAKF,EAAIe,EAAOwC,OAAOlC,EAAOwB,MAAMS,EAAI,IAAIV,OAAQhJ,GAI7D,IAAIyI,EAAepB,EAAU,iBAE7B,SAASqB,EAAetC,EAAI7E,EAAMvB,GAChC,IAAI6G,EAAMU,EAAOvH,EAAQkJ,KAAM3H,GAC/B,OAAO+E,EAAKF,EAAIE,EAAKc,MAAMP,EAAK,QAAQf,KAAK8D,GAAe5J,GAI9D,SAAS4J,EAAaT,GACpB,IAAIU,EAAQV,EAAKG,QAAQ,mBACzB,GAAIO,EAAQ,EAAG,MAAMC,MAAM,oCAC3BD,EAAQV,EAAKG,QAAQ,IAAKO,GAAS,EACnC,IAAIE,EAAMZ,EAAKa,YAAY,KAC3B,OAAOR,KAAKC,MAAMN,EAAKF,MAAMY,EAAOE,GAAO,KAGXpK,EAAOC,UAASD,EAAOC,QAAU0G,GAC7C,oBAAXY,SAAwBA,OAAO+C,UAAY3D,I,6GC7FvC4D,EAxDE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOrJ,EAAkC,EAAlCA,KAAMsJ,EAA4B,EAA5BA,KAAMhE,EAAsB,EAAtBA,GAAIiE,EAAkB,EAAlBA,GACnCC,EAKN,SAAqBC,GAAW,MAEMC,oBAAS,GAAtCC,EAFuB,KAEXC,EAFW,KAK9B,SAASC,EAAT,GAA8B,EAAPhK,MACT4J,GACVG,GAAc,GAKlB,IAAME,EAAY,SAAC,GAAY,EAAVjK,MACP4J,GACVG,GAAc,IAelB,OAVAG,qBAAU,WAIR,OAHA3D,OAAO4D,iBAAiB,UAAWH,GACnCzD,OAAO4D,iBAAiB,QAASF,GAE1B,WACL1D,OAAO6D,oBAAoB,UAAWJ,GACtCzD,OAAO6D,oBAAoB,QAASH,MAErC,IAEIH,EAlCSO,CADyC,EAAdC,SAE7C,SAASC,IACP9E,EAAG+E,SAAH,GAAerK,GAAOuJ,EAAKe,SAAShB,KAqCtC,OAFIE,GAAWY,IAERf,EACL,qBAAKkB,QAASH,EAAWI,UAAU,kBAAnC,SACE,qBAAKA,UAAS,cAAehB,EAAY,mBAAqB,IAA9D,SACGxJ,MAIL,qBACEuK,QAASH,EACTI,UAAS,cAAehB,EAAY,mBAAqB,IAF3D,SAIGxJ,K,qBCnDDyK,EAA+B,CACnC1K,KADmC,cAI/B2K,EAAsB,CAC1B5K,KAD0B,WAExB,OAAO2K,IA2BIE,EAxBK,WAElB,IAAMC,EAAe,IAAIC,aAGrBC,EAAcJ,EAgBlB,MAde,CACbK,cADa,SACCC,GACZC,IAAgBhG,WAAW2F,EAAcI,GACtChG,MAAK,SAAAkG,GACJJ,EAAcI,KAEfC,OAAM,SAAAC,GACLN,EAAcJ,MAGpBL,SAVa,SAUJrK,GACP8K,EAAYhL,KAAKE,MCzBR,SAASqL,EAAKC,GAAQ,IAAD,EACV5B,mBAAS,GAA1B6B,EAD2B,KACrBC,EADqB,OAEV9B,mBAAS,GAA1BJ,EAF2B,KAErBmC,EAFqB,KAI5BC,EAAcf,IACpBe,EAAYX,cAAc,wBA+H1B,OAFAY,SAAS3B,iBAAiB,WAJ1B,SAAwBoB,OAOtB,sBAAKZ,UAAU,UAAf,UACE,sBAAKA,UAAU,UAAf,UACE,gCACE,sBAAMA,UAAU,QAAhB,kBACA,yBACEoB,SAAU,SAAAR,GACRI,EAAQJ,EAAES,OAAOtH,QAEnB9D,KAAK,OACL8I,GAAG,OACHhF,MAAOgH,EANT,UAQE,wBAAQhH,MAAO,EAAf,gBACA,wBAAQA,MAAO,EAAf,gBACA,wBAAQA,MAAO,EAAf,sBAGJ,gCACE,sBAAMiG,UAAU,QAAhB,kBACA,yBACEoB,SAAU,SAAAR,GACRK,EAAQL,EAAES,OAAOtH,QAEnB9D,KAAK,OACL8I,GAAG,OACHhF,MAAO+E,EANT,UAQE,wBAAQ/E,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,wBAIN,qBAAKiG,UAAU,WAAf,SA/IJ,WA+FE,IA9FA,IACkBjB,EADd5I,EAAO,GA8FFiI,EAAI,EAAGA,EAAI2C,EAAM3C,IACxBjI,EAAKyE,MA9FWmE,EA8FIX,EAAI,EA7FjB,CACL,cAAC,EAAD,CACEtD,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,KACNqJ,OAAK,IAEP,cAAC,EAAD,CACE/D,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,KACNqJ,OAAK,IAEP,cAAC,EAAD,CACE/D,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,KACNqJ,OAAK,IAEP,cAAC,EAAD,CACE/D,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,KACNqJ,OAAK,IAEP,cAAC,EAAD,CACE/D,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,MAER,cAAC,EAAD,CACEsF,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,KACNqJ,OAAK,IAEP,cAAC,EAAD,CACE/D,GAAIoG,EACJpC,KAAMA,EACNa,QAAe,GAANZ,EAAU,IAAM,GACzBA,GAAIA,EACJvJ,KAAM,SAQZ,OAAOW,EA4CsBmL,U,kCCzKjC,IAAI/M,EAAS,EAAQ,QAEjB6C,EAAS,EAAQ,QAEjBsE,EAAQ,EAAQ,QAEhB6F,EAAY,EAAQ,QAEpB3L,EAAO,EAAQ,QAEnB,SAAS4L,EAAa1G,EAAIqB,EAAQzH,GAChC,OAAOkB,EAAK2L,EAAU7F,EAAMtE,EAAO7C,EAAOuG,EAAIqB,EAAQzH,OAGtBL,EAAOC,UAASD,EAAOC,QAAUkN,GAC7C,oBAAX5F,SAAwBA,OAAO4F,aAAeA,I,qBCfrDnN,EAAOC,QAoBF,SAASgD,EAAEsJ,EAAGvJ,EAAGoK,GACtB,SAASzJ,EAAEtC,EAAG0I,GACZ,IAAK/G,EAAE3B,GAAI,CACT,IAAKkL,EAAElL,GAAI,CAGT,GAAIsG,EAAG,OAAOA,EAAEtG,GAAG,GACnB,IAAIgM,EAAI,IAAIlD,MAAM,uBAAyB9I,EAAI,KAC/C,MAAMgM,EAAEC,KAAO,mBAAoBD,EAGrC,IAAIxJ,EAAIb,EAAE3B,GAAK,CACbpB,QAAS,IAEXsM,EAAElL,GAAG,GAAGkM,KAAK1J,EAAE5D,SAAS,SAAU+C,GAChC,IAAIoK,EAAIb,EAAElL,GAAG,GAAG2B,GAChB,OAAOW,EAAEyJ,GAAQpK,KAChBa,EAAGA,EAAE5D,QAASgD,EAAGsJ,EAAGvJ,EAAGoK,GAG5B,OAAOpK,EAAE3B,GAAGpB,QAKd,IAFA,IAAI0H,GAAI,EAECtG,EAAI,EAAGA,EAAI+L,EAAElJ,OAAQ7C,IAC5BsC,EAAEyJ,EAAE/L,IAGN,OAAOsC,EA7BF,CA8BL,CACA6J,EAAG,CAAC,SAAUjB,EAAGvJ,EAAGoK,GAClB,aAEAvL,OAAO4L,eAAeL,EAAG,aAAc,CACrC1H,OAAO,IAGT0H,EAAW,QAAI,SAAUb,GAiFvB,OAAO,IAhFP,SAAWA,GAKT,GAJA3H,KAAK8I,OAASnB,EACd3H,KAAK+I,MAAQpB,EAAE/C,KACf5E,KAAKgJ,aAAerB,EAAEqB,aAElBhJ,KAAK+I,OAAS/I,KAAK+I,MAAMzJ,OAAS,EACpCO,QAAQC,KAAK,iCAAkCE,KAAK+I,MAAMzJ,aAO5D,OAHAU,KAAKiJ,aAA2B,IAAZtB,EAAE/C,KAAK,GAC3B5E,KAAK7D,QAAsB,GAAZwL,EAAE/C,KAAK,GAEd5E,KAAKiJ,cACX,KAAK,IACHjJ,KAAK/D,YAAc,UACnB+D,KAAK5D,IAAkB,IAAZuL,EAAE/C,KAAK,GAClB5E,KAAK9D,SAAuB,IAAZyL,EAAE/C,KAAK,GACvB,MAEF,KAAK,IACH5E,KAAK/D,YAAc,SACnB+D,KAAK5D,IAAkB,IAAZuL,EAAE/C,KAAK,GAClB5E,KAAK9D,SAAuB,IAAZyL,EAAE/C,KAAK,GACvB,MAEF,KAAK,IACH5E,KAAK/D,YAAc,cACnB+D,KAAK5D,IAAkB,IAAZuL,EAAE/C,KAAK,GAClB5E,KAAKkJ,SAAuB,IAAZvB,EAAE/C,KAAK,GACvB,MAEF,KAAK,IACH5E,KAAK/D,YAAc,gBACnB+D,KAAKmJ,iBAA+B,IAAZxB,EAAE/C,KAAK,GAC/B5E,KAAKoJ,gBAA8B,IAAZzB,EAAE/C,KAAK,GAEA,MAA1B5E,KAAKmJ,kBAAqD,IAAzBnJ,KAAKoJ,gBACxCpJ,KAAKqJ,mBAAqB,cACS,MAA1BrJ,KAAKmJ,iBACdnJ,KAAKqJ,mBAAqB,sBACS,MAA1BrJ,KAAKmJ,iBACe,IAAzBnJ,KAAKoJ,gBACPpJ,KAAKqJ,mBAAqB,kBAE1BrJ,KAAKqJ,mBAAqB,iBAEO,MAA1BrJ,KAAKmJ,kBAAqD,IAAzBnJ,KAAKoJ,gBAC/CpJ,KAAKqJ,mBAAqB,cACS,MAA1BrJ,KAAKmJ,kBAAqD,IAAzBnJ,KAAKoJ,gBAC/CpJ,KAAKqJ,mBAAqB,cACS,MAA1BrJ,KAAKmJ,kBAAqD,IAAzBnJ,KAAKoJ,gBAC/CpJ,KAAKqJ,mBAAqB,aACS,MAA1BrJ,KAAKmJ,iBACdnJ,KAAKqJ,mBAAqB,aACS,MAA1BrJ,KAAKmJ,mBACdnJ,KAAKqJ,mBAAqB,cAG5B,MAEF,KAAK,IACHrJ,KAAK/D,YAAc,gBACnB+D,KAAKsJ,QAAU3B,EAAE/C,KAAK,GACtB,MAEF,KAAK,IACH5E,KAAK/D,YAAc,kBACnB+D,KAAKkJ,SAAuB,IAAZvB,EAAE/C,KAAK,GACvB,MAEF,KAAK,IACH5E,KAAK/D,YAAc,kBACnB,IAAImC,EAAgB,IAAZuJ,EAAE/C,KAAK,GACX4D,EAAgB,IAAZb,EAAE/C,KAAK,GACf5E,KAAKuJ,WAAanL,GAAK,GAAKoK,GAK3B,CAAMb,IAGfvJ,EAAE/C,QAAUmN,EAAW,SACtB,KACF,GAAI,CAAC,GA5HD,CA4HK,I,mBClJdpN,EAAOC,QAEP,SAAc8L,GACZ,IAAIqC,EAAOrC,EAAanG,aACpByI,EAAUD,EAAKE,SAwHrB,SAAoBnL,GAClB,IAAIkL,EAAUlL,EAAQoL,qBAClBlF,EAASlG,EAAQqL,aAAa,EAAG,EAAGrL,EAAQsL,YAIhD,OAHApF,EAAOqF,eAAe,GAAGC,IAAIC,GAC7BP,EAAQhF,OAASA,EACjBgF,EAAQQ,MAAO,EACRR,EA9HuBS,CAAW/C,GACrCrG,EAAQqJ,EAAMV,GACdW,EAAaD,EAAMV,GACnBY,EAAWF,EAAMV,GAiBrB,OAhBAD,EAAKc,aAAeH,EAAMC,GAC1BZ,EAAKe,WAAaJ,EAAME,GACxBb,EAAKgB,YAAcL,EAAMrJ,GAEzB0I,EAAKgB,YAAYvJ,QAAQuI,GAEzBA,EAAKc,aAAarJ,QAAQuI,GAE1BA,EAAKe,WAAWtJ,QAAQuI,GAExBA,EAAK1I,MAAQA,EAAMlF,KACnB4N,EAAKY,WAAaA,EAAWxO,KAC7B4N,EAAKa,SAAWA,EAASzO,KACzB4N,EAAKY,WAAWtJ,MAAQ,EACxB0I,EAAKa,SAASvJ,MAAQ,EACtB7D,OAAOwN,iBAAiBjB,EAAM3B,GACvB2B,GAGT,IAAI3B,EAAQ,CACV6C,OAAQ,CACN5J,MAAO,EACP6J,UAAU,GAEZC,MAAO,CACL9J,MAAO,EACP6J,UAAU,GAEZE,QAAS,CACP/J,MAAO,EACP6J,UAAU,GAEZG,QAAS,CACPhK,MAAO,EACP6J,UAAU,GAEZI,mBAAoB,CAClBjK,MAAO,WACL,OAAOd,KAAK8K,UAGhBxN,MAAO,CACLwD,MAAO,SAAekK,GACpB,IAAI5C,EAASpI,KAAKwK,YAAY5O,KAC1BqP,EAAcjL,KAAKsK,aAAa1O,KAChCsP,EAAYlL,KAAKuK,WAAW3O,KAEhCoE,KAAK0J,SAASpM,MAAM0N,GAEpBhL,KAAKmL,WAAanL,KAAKmL,WAAaH,EAAKhL,KAAK0K,OAC9C1K,KAAKoL,WAAaJ,EAClB,IAAIH,EAAU7K,KAAK6K,QACnBzC,EAAOiD,sBAAsBL,GAC7BC,EAAYI,sBAAsBL,GAClCE,EAAUG,sBAAsBL,GAChCE,EAAUI,eAAe,EAAGN,GAExBhL,KAAK0K,QACPtC,EAAOkD,eAAe,EAAGN,GACzB5C,EAAOmD,wBAAwB,EAAGP,EAAKhL,KAAK0K,QAC5CO,EAAYK,eAAe,EAAGN,GAC9BC,EAAYM,wBAAwB,EAAGP,EAAKhL,KAAK0K,UAEjDtC,EAAOkD,eAAe,EAAGN,GACzBC,EAAYK,eAAe,EAAGN,IAG5BhL,KAAK4K,OACPxC,EAAOoD,gBAAgBX,EAAS7K,KAAKmL,WAAYM,EAAgBzL,KAAK4K,UAI5EtO,KAAM,CACJwE,MAAO,SAAekK,EAAIU,GACpBA,IACFV,GAAUhL,KAAK8K,SAGjB,IAAIa,EAAUX,EAAKhL,KAAK8K,QAExB,GAAI9K,KAAK8K,QAAS,CAChB,IAAI1C,EAASpI,KAAKwK,YAAY5O,KAC1BqP,EAAcjL,KAAKsK,aAAa1O,KAChCsP,EAAYlL,KAAKuK,WAAW3O,KAChCwM,EAAOiD,sBAAsBL,GAC7BC,EAAYI,sBAAsBL,GAClCE,EAAUG,sBAAsBL,GAChC,IAAIY,EAAaH,EAAgBzL,KAAK8K,SAEtC,GAAI9K,KAAK0K,QAAUM,EAAKhL,KAAKmL,WAAY,CACvC,IAAIU,EA6Cd,SAAkBvO,EAAOkI,EAAKsG,EAAUC,EAAQf,GAC9C,IAIIlK,EAAQxD,GAFO0N,EAAKc,IADbC,EAASD,IADHtG,EAAMlI,GAMnBwD,GAASxD,IACXwD,EAAQxD,GAGNwD,GAAS0E,IACX1E,EAAQ0E,GAGV,OAAO1E,EA5DmBkL,CAAS,EAAG,EAAGhM,KAAKoL,WAAYpL,KAAKmL,WAAYH,GACnE5C,EAAOmD,wBAAwBM,EAAab,GAC5CC,EAAYM,wBAAwB,EAAIM,EAAab,GACrDC,EAAYO,gBAAgB,EAAGR,EAAIY,GAGrCV,EAAUM,gBAAgB,EAAGR,EAAIY,GACjCxD,EAAOoD,gBAAgB,EAAGR,EAAIY,GAKhC,OAFA5L,KAAK0J,SAASpN,KAAKqP,GAEZA,IAGXM,QAAS,CACPC,IAAK,WACH,OAAOlM,KAAK0J,SAASuC,SAEvBlC,IAAK,SAAajJ,GAChBd,KAAK0J,SAASuC,QAAUnL,KAI1BkJ,EAAO,IAAImC,aAAa,CAAC,EAAG,IAWhC,SAAShC,EAAMX,GACb,IAAI5N,EAAO4N,EAAKjL,QAAQyC,aAExB,OADAwI,EAAKvI,QAAQrF,GACNA,EAGT,SAAS6P,EAAgBvN,GACvB,OAAOT,KAAKsC,IAAI7B,EAAO,GAAKT,KAAKsC,IAAI,O,oCCjIvC3E,EAAOC,QAAU,SAAUiH,EAAK1B,GAC9B,OAAO,IAAIS,SAAQ,SAAUkD,EAAMF,GACjC,IAAI+H,EAAM,IAAIC,eACVzL,IAAMwL,EAAIE,aAAe1L,GAC7BwL,EAAIG,KAAK,MAAOjK,GAEhB8J,EAAII,OAAS,WACI,MAAfJ,EAAIK,OAAiBlI,EAAK6H,EAAIM,UAAYrI,EAAOkB,MAAM6G,EAAIO,cAG7DP,EAAIQ,QAAU,WACZvI,EAAOkB,MAAM,mBAGf6G,EAAIS,Y,kCCvBR,IAAIC,EAAQ,oDAwCZ,IAAIC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IA4CnC,SAAS7H,EAAM8H,EAAKC,EAASC,GAC3B,GAAmB,iBAARF,EAAkB,OAAO,KACpC,IAAIG,EAAIL,EAAMM,KAAKJ,GACnB,IAAKG,IAAMF,GAAWE,EAAE,GAAI,OAAO,KACnC,IAAIzK,EAAI,CACN2K,OAAQF,EAAE,GAAGG,cACbC,IAAKJ,EAAE,GAAGK,QAAQ,KAAM,OAc1B,OAZA9K,EAAE+K,GAAK/K,EAAE2K,OAAS3K,EAAE6K,IACpB7K,EAAEgL,MAAQhL,EAAE2K,OAAOM,WAAW,GAAK,GAAK,EACxCjL,EAAEkL,IAAmB,MAAblL,EAAE6K,IAAI,IAAc7K,EAAE6K,IAAIjO,OAASoD,EAAE6K,IAAIjO,OACjDoD,EAAEmL,OAASd,EAAUrK,EAAEgL,MAAQhL,EAAEkL,IAE7BT,EAAE,KACJzK,EAAEoL,KAAOX,EAAE,GACXzK,EAAE/F,KAAO+F,EAAEmL,OAAS,IAAMnL,EAAEoL,IAAM,GAClCpL,EAAEpC,KAAOC,EAAWmC,EAAE/F,KAAMuQ,IAG1BD,IAASvK,EAAEqL,QAAUZ,EAAE,IACpBzK,EAUT,SAASnC,EAAW5D,EAAMuQ,GACxB,OAAOzP,KAAKuQ,IAAI,GAAIrR,EAAO,IAAM,KAAOuQ,GAAU,KAGpD,IAAIzN,EAAS,CACXyF,MAAOA,EACP+I,MApFF,WACE,OAAOnB,GAoFPvM,WAAYA,GAEJ,CAAC,SAAU,MAAO,KAAM,OAAQ,MAAO,SAAU,MAAO,OAAQ,QACtE2N,SAAQ,SAAUlR,GACpByC,EAAOzC,GAAQ,SAAUmR,GACvB,IAAIzL,EAAIwC,EAAMiJ,GACd,OAAOzL,QAAwB,IAAZA,EAAE1F,GAAwB0F,EAAE1F,GAAQ,SAG3D5B,EAAOC,QAAUoE,G,kCCjIjB,IAAI2O,EAAO,EAAQ,QAEfC,EAAQ,GACRC,EAAW,CACb1S,KAAM,EACN8O,OAAQ,IACRE,MAAO,GACPC,QAAS,GACTC,QAAS,GACTb,MAAM,EACNrM,MAAO,EACP2Q,UAAW,EACXC,QAAS,GAsLX,SAASC,EAAMC,GACb,MAAoB,iBAANA,EAGhB,IAAIC,EAAS,CAAC,SAAU,QAAS,UAAW,WAsB5CvT,EAAOC,QAhMP,SAAsBwG,EAAIqB,EAAQzH,GAChC,IAAImT,GAAY,EACZC,EAAS,EACTC,EAAU,GACVC,EAAMlN,EAAGb,aACb+N,EAAInT,KAAKkF,MAAQ,EACjB,IAAInF,EAAOsB,OAAOU,OAAO,GAAI2Q,EAAU7S,GAKnCH,EAAS,CACXiD,QAASsD,EACTkN,IAAKA,EACLpT,KAAMA,GA6GR,OA3GIuH,aAAkB8L,YAAa1T,EAAOmJ,OAASvB,EAAY5H,EAAOsB,QAAUsG,EAqBhF5H,EAAOgC,MAAQ,SAAUN,EAAMO,EAAM9B,GAEnC,GAAIH,EAAOmJ,QAAmB,OAATzH,EAAe,OAAO1B,EAAOgC,MAAM,KAAMN,EAAMO,GACpE,IAAIkH,EAASzH,EAAO1B,EAAOsB,QAAQI,GAAQ1B,EAAOmJ,OAElD,GAAKA,EAAL,CAGO,GAAKmK,EAAL,CAKP,IAAIjT,EAAOF,GAAW4S,EACtB9Q,EAAOE,KAAKwR,IAAIpN,EAAGrD,YAAajB,GAAQ,GACxCjC,EAAOmD,KAAK,QAASlB,EAAMP,EAAMrB,GACjC,IAAI6N,EAAO0F,EAAWlS,EAAMyH,EAAQ9I,GAMpC,OALA6N,EAAK1D,GAuEP,SAAe9I,EAAMwM,GAYnB,OAXAA,EAAK1D,GAAK+I,IACVC,EAAQtF,EAAK1D,IAAM0D,EAEnBA,EAAKtG,OAAO+I,QAAU,WACpB,IAAI3N,EAAMuD,EAAGrD,YACbgL,EAAKtG,OAAOiM,aACZ3F,EAAK4F,IAAID,aACT3F,EAAK2F,aACL7T,EAAOmD,KAAK,QAASH,EAAKkL,EAAK1D,GAAI0D,IAG9BA,EAAK1D,GAnFFuJ,CAAMrS,EAAMwM,GACtBA,EAAK4F,IAAI9R,MAAMC,GACfiM,EAAKtG,OAAO5F,MAAMC,GAClBjC,EAAOmD,KAAK,UAAWlB,EAAMiM,EAAK1D,GAAI0D,GAClC7N,EAAK0E,UAAUmJ,EAAKlN,KAAKiB,EAAO5B,EAAK0E,UAClCmJ,EAbL3J,QAAQC,KAAK,gDAHbD,QAAQC,KAAK,UAAY9C,EAAO,gBA2BpC1B,EAAOe,KAAO,SAAUW,EAAMO,EAAM9B,GAClC,OAAOH,EAAOgC,MAAMN,EAAMO,EAAM9B,IAmBlCH,EAAOgB,KAAO,SAAUiB,EAAM+R,GAC5B,IAAI9F,EAEJ,OADA8F,EAAMA,GAAOrS,OAAOC,KAAK4R,IACdjS,KAAI,SAAUiJ,GAEvB,OADA0D,EAAOsF,EAAQhJ,KAEf0D,EAAKlN,KAAKiB,GACHiM,EAAK1D,IAFM,SAgBtBxK,EAAO2F,QAAU,SAAU6D,GAGzB,OAFA8J,GAAY,EACZG,EAAI9N,QAAQ6D,GACLxJ,GAGTA,EAAOmD,KAAO,SAAUC,EAAOnB,EAAMsH,EAAKlJ,GACpCL,EAAOiU,SAASjU,EAAOiU,QAAQ7Q,EAAOnB,EAAMsH,EAAKlJ,GACrD,IAAI6T,EAAKlU,EAAO,KAAOoD,GACnB8Q,GAAIA,EAAGjS,EAAMsH,EAAKlJ,IAGjBL,EAiBP,SAAS4T,EAAWlS,EAAMyH,EAAQhJ,GAChC,IA+CiBmC,EA/Cb4L,EAAO3H,EAAGb,aAqBd,OApBAwI,EAAK5N,KAAKkF,MAAQ,EAElB0I,EAAKvI,QAAQ8N,GACbvF,EAAK4F,IA2BT,SAAkBvN,EAAIpG,EAASE,GAC7B,IAAIyT,EAAMhB,EAAKvM,GACX4N,EAAOhU,EAAQgU,MAAQ9T,EAAK8T,KAKhC,OAJAd,EAAOT,SAAQ,SAAUlR,EAAMmI,GACnBiK,EAAIpS,GAAVyS,EAAkBA,EAAKtK,GAAoB1J,EAAQuB,IAASrB,EAAKqB,MAEvEoS,EAAItO,MAAMA,MAAQ2N,EAAMhT,EAAQG,MAAQH,EAAQG,KAAO6S,EAAM9S,EAAKC,MAAQD,EAAKC,KAAO,EAC/EwT,EAlCMM,CAAS7N,EAAIpG,EAASE,GACjC6N,EAAK4F,IAAInO,QAAQuI,EAAK5N,MACtB4N,EAAKtG,OAASrB,EAAG8H,qBACjBH,EAAKtG,OAAOuB,OAASA,EACrB+E,EAAKtG,OAAOjC,QAAQuI,GACpBA,EAAKtG,OAAO+G,KAAOxO,EAAQwO,MAAQtO,EAAKsO,KACxCT,EAAKtG,OAAOyM,aAAa7O,OAqCRlD,EArC4BnC,EAAQmC,OAASjC,EAAKiC,OAsCtDH,KAAKuQ,IAAI,EAAGpQ,EAAQ,MAAQ,EArCzC4L,EAAKtG,OAAOqL,UAAY9S,EAAQ8S,WAAa5S,EAAK4S,UAClD/E,EAAKtG,OAAOsL,QAAU/S,EAAQ+S,SAAW7S,EAAK6S,QAE9ChF,EAAKlN,KAAO,SAAUiB,GACpB,IAAIW,EAAOX,GAAQsE,EAAGrD,YACtBlD,EAAOmD,KAAK,OAAQP,EAAMlB,GAC1B,IAAI4S,EAASpG,EAAK4F,IAAI9S,KAAK4B,GAC3BsL,EAAKtG,OAAO5G,KAAKsT,IAGZpG,K,kCC/LX,SAASqG,EAAQrH,EAAGsH,GAClB,OAAOhS,MAAMgS,EAAM,GAAGC,KAAKvH,GAG7B,SAASiG,EAAMC,GACb,MAAoB,iBAANA,EAWhB,SAASnO,EAAW5D,EAAMuQ,GACxB,OAAOzP,KAAKuQ,IAAI,GAAIrR,EAAO,IAAM,KAAOuQ,GAAU,KAnBpD,qcAsBA,IAAIJ,EAAQ,oDAoCL,SAASmB,IACd,OAAOnB,EAET,IAAIC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IA6C5B,SAAS7H,EAAM8H,EAAKC,EAASC,GAClC,GAAmB,iBAARF,EAAkB,OAAO,KACpC,IAAIG,EAAIL,EAAMM,KAAKJ,GACnB,IAAKG,IAAMF,GAAWE,EAAE,GAAI,OAAO,KACnC,IAAIzK,EAAI,CACN2K,OAAQF,EAAE,GAAGG,cACbC,IAAKJ,EAAE,GAAGK,QAAQ,KAAM,OAE1B9K,EAAE+K,GAAK/K,EAAE2K,OAAS3K,EAAE6K,IACpB7K,EAAEgL,MAAQhL,EAAE2K,OAAOM,WAAW,GAAK,GAAK,EACxCjL,EAAEkL,IAAmB,MAAblL,EAAE6K,IAAI,IAAc7K,EAAE6K,IAAIjO,OAASoD,EAAE6K,IAAIjO,OACjD,IAAI0Q,EAAMjD,EAAUrK,EAAEgL,MAAQhL,EAAEkL,IAWhC,OAVAlL,EAAEmL,OAASmC,EAAM,EAAI,GAAKA,EAAMA,EAAM,GAElC7C,EAAE,KAEJzK,EAAEoL,KAAOX,EAAE,GACXzK,EAAE/F,KAAOqT,EAAM,IAAMtN,EAAEoL,IAAM,GAC7BpL,EAAEpC,KAAOC,EAAWmC,EAAE/F,KAAMuQ,IAG1BD,IAASvK,EAAEqL,QAAUZ,EAAE,IACpBzK,EA2BF,SAASuN,EAAMzH,EAAGzJ,EAAGV,GAC1B,OAAImK,QAA+C,KAC/CA,EAAEkF,KAAauC,EAAMzH,EAAEkF,KAAMlF,EAAEoF,IAAKpF,EAAEsF,KACtCtF,EAAI,GAAKA,EAAI,EAAU,KA5Bf,UA6BG0H,OAAO1H,IA1BdiG,EADMhS,EA2BoBsC,GA1BVtC,EAAI,EAAIoT,EAAQ,KAAMpT,GAAKoT,EAAQ,IAAKpT,GAA7C,IAGrB,SAAgBA,GACd,OAAQgS,EAAMhS,GAAU,GAAKA,EAAV,GAsBoB0T,CAAO9R,GA3BhD,IAAgB5B,EA+CT,SAASE,EAAKJ,GACnB,IAAKkS,EAAMlS,IAzKS,iBAyKMA,IAAUA,GAAQ,GAAKA,EAAO,IAAK,OAAQA,EA1KvE,IA2KMmG,EAAIwC,EAAM3I,GACd,OAAOmG,GAxKT,SAAegM,GACb,YAAoB,IAANA,EAuKF0B,CAAM1N,EAAE/F,MAAQ+F,EAAE/F,KAAO,KAwBhC,SAAS2D,EAAK/D,EAAM2Q,GACzB,IAAIC,EAAIxQ,EAAKJ,GACb,OAAa,OAAN4Q,EAAa,KAAO5M,EAAW4M,EAAGD,GAEpC,SAASG,EAAOc,GACrB,OAAQjJ,EAAMiJ,IAAQ,IAAId,OAErB,SAASE,EAAIY,GAClB,OAAQjJ,EAAMiJ,IAAQ,IAAIZ,IAErB,SAASE,EAAGU,GACjB,OAAQjJ,EAAMiJ,IAAQ,IAAIV,GAErB,SAASC,EAAKS,GACnB,OAAQjJ,EAAMiJ,IAAQ,IAAIT,KAErB,SAASE,EAAIO,GAClB,OAAQjJ,EAAMiJ,IAAQ,IAAIP,IAErB,SAASC,EAAOM,GACrB,OAAQjJ,EAAMiJ,IAAQ,IAAIN,OAErB,SAASC,EAAIK,GAClB,OAAQjJ,EAAMiJ,IAAQ,IAAIL,M,kCCvM5B1S,EAAOC,QAAU,CACf+J,OAvBF,SAAgBiL,EAASC,GAMvB,IALA,IAKSC,EAAOC,EAZEC,EAOdC,EAAUL,EAAQ7C,QAAQ,oBAAqB,IAC/CmD,EAASD,EAAQpR,OACjBsR,EAAUN,EAAc7S,KAAKoT,MAAe,EAATF,EAAa,GAAK,GAAKL,GAAeA,EAAuB,EAATK,EAAa,GAAK,EACzGG,EAAU,IAAIC,WAAWH,GAENI,EAAU,EAAGC,EAAU,EAAGC,EAAS,EAAGA,EAASP,EAAQO,IAI5E,GAHAV,EAAiB,EAATU,EACRF,KAdgBP,EAcMC,EAAQ/C,WAAWuD,IAb7B,IAAMT,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAAMA,EAAO,GAAKA,EAAO,IAAMA,EAAO,GAAKA,EAAO,EAAa,KAATA,EAAc,GAAc,KAATA,EAAc,GAAK,IAarG,GAAK,EAAID,EAEhD,IAAVA,GAAeG,EAASO,GAAW,EAAG,CACxC,IAAKX,EAAQ,EAAGA,EAAQ,GAAKU,EAAUL,EAASL,IAASU,IACvDH,EAAQG,GAAWD,KAAa,KAAOT,EAAQ,IAAM,IAGvDS,EAAU,EAId,OAAOF","file":"component---src-pages-index-js-02f8013e962f6ed5eaf3.js","sourcesContent":["var midimessage = require('midimessage');\n\nmodule.exports = function (player) {\n  /**\n  * Connect a player to a midi input\n  *\n  * The options accepts:\n  *\n  * - channel: the channel to listen to. Listen to all channels by default.\n  *\n  * @param {MIDIInput} input\n  * @param {Object} options - (Optional)\n  * @return {SamplePlayer} the player\n  * @example\n  * var piano = player(...)\n  * window.navigator.requestMIDIAccess().then(function (midiAccess) {\n  *   midiAccess.inputs.forEach(function (midiInput) {\n  *     piano.listenToMidi(midiInput)\n  *   })\n  * })\n  */\n  player.listenToMidi = function (input, options) {\n    var started = {};\n    var opts = options || {};\n\n    var gain = opts.gain || function (vel) {\n      return vel / 127;\n    };\n\n    input.onmidimessage = function (msg) {\n      var mm = msg.messageType ? msg : midimessage(msg);\n\n      if (mm.messageType === 'noteon' && mm.velocity === 0) {\n        mm.messageType = 'noteoff';\n      }\n\n      if (opts.channel && mm.channel !== opts.channel) return;\n\n      switch (mm.messageType) {\n        case 'noteon':\n          started[mm.key] = player.play(mm.key, 0, {\n            gain: gain(mm.velocity)\n          });\n          break;\n\n        case 'noteoff':\n          if (started[mm.key]) {\n            started[mm.key].stop();\n            delete started[mm.key];\n          }\n\n          break;\n      }\n    };\n\n    return player;\n  };\n\n  return player;\n};","'use strict';\n\nvar note = require('note-parser');\n\nvar isMidi = function isMidi(n) {\n  return n !== null && n !== [] && n >= 0 && n < 129;\n};\n\nvar toMidi = function toMidi(n) {\n  return isMidi(n) ? +n : note.midi(n);\n}; // Adds note name to midi conversion\n\n\nmodule.exports = function (player) {\n  if (player.buffers) {\n    var map = player.opts.map;\n    var toKey = typeof map === 'function' ? map : toMidi;\n\n    var mapper = function mapper(name) {\n      return name ? toKey(name) || name : null;\n    };\n\n    player.buffers = mapBuffers(player.buffers, mapper);\n    var start = player.start;\n\n    player.start = function (name, when, options) {\n      var key = mapper(name);\n      var dec = key % 1;\n\n      if (dec) {\n        key = Math.floor(key);\n        options = Object.assign(options || {}, {\n          cents: Math.floor(dec * 100)\n        });\n      }\n\n      return start(key, when, options);\n    };\n  }\n\n  return player;\n};\n\nfunction mapBuffers(buffers, toKey) {\n  return Object.keys(buffers).reduce(function (mapped, name) {\n    mapped[toKey(name)] = buffers[name];\n    return mapped;\n  }, {});\n}","'use strict';\n\nvar isArr = Array.isArray;\n\nvar isObj = function isObj(o) {\n  return o && typeof o === 'object';\n};\n\nvar OPTS = {};\n\nmodule.exports = function (player) {\n  /**\n   * Schedule a list of events to be played at specific time.\n   *\n   * It supports three formats of events for the events list:\n   *\n   * - An array with [time, note]\n   * - An array with [time, object]\n   * - An object with { time: ?, [name|note|midi|key]: ? }\n   *\n   * @param {Float} time - an absolute time to start (or AudioContext's\n   * currentTime if provided number is 0)\n   * @param {Array} events - the events list.\n   * @return {Array} an array of ids\n   *\n   * @example\n   * // Event format: [time, note]\n   * var piano = player(ac, ...).connect(ac.destination)\n   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])\n   *\n   * @example\n   * // Event format: an object { time: ?, name: ? }\n   * var drums = player(ac, ...).connect(ac.destination)\n   * drums.schedule(0, [\n   *   { name: 'kick', time: 0 },\n   *   { name: 'snare', time: 0.5 },\n   *   { name: 'kick', time: 1 },\n   *   { name: 'snare', time: 1.5 }\n   * ])\n   */\n  player.schedule = function (time, events) {\n    var now = player.context.currentTime;\n    var when = time < now ? now : time;\n    player.emit('schedule', when, events);\n    var t, o, note, opts;\n    return events.map(function (event) {\n      if (!event) return null;else if (isArr(event)) {\n        t = event[0];\n        o = event[1];\n      } else {\n        t = event.time;\n        o = event;\n      }\n\n      if (isObj(o)) {\n        note = o.name || o.key || o.note || o.midi || null;\n        opts = o;\n      } else {\n        note = o;\n        opts = OPTS;\n      }\n\n      return player.start(note, when + (t || 0), opts);\n    });\n  };\n\n  return player;\n};","module.exports = function (player) {\n  /**\n   * Adds a listener of an event\n   * @chainable\n   * @param {String} event - the event name\n   * @param {Function} callback - the event handler\n   * @return {SamplePlayer} the player\n   * @example\n   * player.on('start', function(time, note) {\n   *   console.log(time, note)\n   * })\n   */\n  player.on = function (event, cb) {\n    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event);\n    var prop = 'on' + event;\n    var old = player[prop];\n    player[prop] = old ? chain(old, cb) : cb;\n    return player;\n  };\n\n  return player;\n};\n\nfunction chain(fn1, fn2) {\n  return function (a, b, c, d) {\n    fn1(a, b, c, d);\n    fn2(a, b, c, d);\n  };\n}","'use strict';\n\nvar parser = require('note-parser');\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\n\n\nfunction Soundfont(ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected');\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()');\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx);\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl;\n  this.ctx = ctx;\n  this.instruments = {};\n  this.promises = [];\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API');\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()');\n  Promise.all(this.promises).then(callback);\n};\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.');\n  console.log('Please use Soundfont.instrument() instead.');\n  var ctx = this.ctx;\n  name = name || 'default';\n  if (name in this.instruments) return this.instruments[name];\n  var inst = {\n    name: name,\n    play: oscillatorPlayer(ctx, options)\n  };\n  this.instruments[name] = inst;\n\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play;\n      return inst;\n    });\n    this.promises.push(promise);\n\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      promise.then(cb);\n    };\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      cb();\n    };\n  }\n\n  return inst;\n};\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\n\n\nfunction loadBuffers(ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.');\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.');\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers;\n  });\n}\n\nSoundfont.loadBuffers = loadBuffers;\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\n\nfunction oscillatorPlayer(ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.');\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.');\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note);\n    var freq = midi ? parser.midiToFreq(midi, 440) : null;\n    if (!freq) return;\n    duration = duration || 0.2;\n    options = options || {};\n    var destination = options.destination || defaultOptions.destination || ctx.destination;\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine';\n    var gain = options.gain || defaultOptions.gain || 0.4;\n    var vco = ctx.createOscillator();\n    vco.type = vcoType;\n    vco.frequency.value = freq;\n    /* VCA */\n\n    var vca = ctx.createGain();\n    vca.gain.value = gain;\n    /* Connections */\n\n    vco.connect(vca);\n    vca.connect(destination);\n    vco.start(time);\n    if (duration > 0) vco.stop(time + duration);\n    return vco;\n  };\n}\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\n\n\nSoundfont.noteToMidi = parser.midi;\nmodule.exports = Soundfont;","'use strict';\n\nvar load = require('audio-loader');\n\nvar player = require('sample-player');\n/**\n * Load a soundfont instrument. It returns a promise that resolves to a\n * instrument object.\n *\n * The instrument object returned by the promise has the following properties:\n *\n * - name: the instrument name\n * - play: A function to play notes from the buffer with the signature\n * `play(note, time, duration, options)`\n *\n *\n * The valid options are:\n *\n * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n * - `nameToUrl` <Function>: a function to convert from instrument names to URL\n * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n * - `gain`: the gain of the player (1 by default)\n * - `notes`: an array of the notes to decode. It can be an array of strings\n * with note names or an array of numbers with midi note numbers. This is a\n * performance option: since decoding mp3 is a cpu intensive process, you can limit\n * limit the number of notes you want and reduce the time to load the instrument.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'\n * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers\n * @return {Promise}\n *\n * @example\n * var Soundfont = require('sounfont-player')\n * Soundfont.instrument('marimba').then(function (marimba) {\n *   marimba.play('C4')\n * })\n */\n\n\nfunction instrument(ac, name, options) {\n  if (arguments.length === 1) return function (n, o) {\n    return instrument(ac, n, o);\n  };\n  var opts = options || {};\n  var isUrl = opts.isSoundfontURL || isSoundfontURL;\n  var toUrl = opts.nameToUrl || nameToUrl;\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format);\n  return load(ac, url, {\n    only: opts.only || opts.notes\n  }).then(function (buffers) {\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination);\n    p.url = url;\n    p.name = name;\n    return p;\n  });\n}\n\nfunction isSoundfontURL(name) {\n  return /\\.js(\\?.*)?$/i.test(name);\n}\n/**\n * Given an instrument name returns a URL to to the Benjamin Gleitzman's\n * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n *\n * @param {String} name - instrument name\n * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'\n * or 'MusyngKite' ('MusyngKite' by default)\n * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)\n * @returns {String} the Soundfont file url\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.nameToUrl('marimba', 'mp3')\n */\n\n\nfunction nameToUrl(name, sf, format) {\n  format = format === 'ogg' ? format : 'mp3';\n  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite';\n  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js';\n} // In the 1.0.0 release it will be:\n// var Soundfont = {}\n\n\nvar Soundfont = require('./legacy');\n\nSoundfont.instrument = instrument;\nSoundfont.nameToUrl = nameToUrl;\nif (typeof module === 'object' && module.exports) module.exports = Soundfont;\nif (typeof window !== 'undefined') window.Soundfont = Soundfont;","'use strict';\n\nvar base64 = require('./base64');\n\nvar fetch = require('./fetch'); // Given a regex, return a function that test if against a string\n\n\nfunction fromRegex(r) {\n  return function (o) {\n    return typeof o === 'string' && r.test(o);\n  };\n} // Try to apply a prefix to a name\n\n\nfunction prefix(pre, name) {\n  return typeof pre === 'string' ? pre + name : typeof pre === 'function' ? pre(name) : name;\n}\n/**\n * Load one or more audio files\n *\n *\n * Possible option keys:\n *\n * - __from__ {Function|String}: a function or string to convert from file names to urls.\n * If is a string it will be prefixed to the name:\n * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`\n * If it's a function it receives the file name and should return the url as string.\n * - __only__ {Array} - when loading objects, if provided, only the given keys\n * will be included in the decoded object:\n * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`\n *\n * @param {AudioContext} ac - the audio context\n * @param {Object} source - the object to be loaded\n * @param {Object} options - (Optional) the load options for that object\n * @param {Object} defaultValue - (Optional) the default value to return as\n * in a promise if not valid loader found\n */\n\n\nfunction load(ac, source, options, defVal) {\n  var loader = // Basic audio loading\n  isArrayBuffer(source) ? loadArrayBuffer : isAudioFileName(source) ? loadAudioFile : isPromise(source) ? loadPromise // Compound objects\n  : isArray(source) ? loadArrayData : isObject(source) ? loadObjectData : isJsonFileName(source) ? loadJsonFile // Base64 encoded audio\n  : isBase64Audio(source) ? loadBase64Audio : isJsFileName(source) ? loadMidiJSFile : null;\n  var opts = options || {};\n  return loader ? loader(ac, source, opts) : defVal ? Promise.resolve(defVal) : Promise.reject('Source not valid (' + source + ')');\n}\n\nload.fetch = fetch; // BASIC AUDIO LOADING\n// ===================\n// Load (decode) an array buffer\n\nfunction isArrayBuffer(o) {\n  return o instanceof ArrayBuffer;\n}\n\nfunction loadArrayBuffer(ac, array, options) {\n  return new Promise(function (done, reject) {\n    ac.decodeAudioData(array, function (buffer) {\n      done(buffer);\n    }, function () {\n      reject(\"Can't decode audio data (\" + array.slice(0, 30) + '...)');\n    });\n  });\n} // Load an audio filename\n\n\nvar isAudioFileName = fromRegex(/\\.(mp3|wav|ogg)(\\?.*)?$/i);\n\nfunction loadAudioFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'arraybuffer'), options);\n} // Load the result of a promise\n\n\nfunction isPromise(o) {\n  return o && typeof o.then === 'function';\n}\n\nfunction loadPromise(ac, promise, options) {\n  return promise.then(function (value) {\n    return load(ac, value, options);\n  });\n} // COMPOUND OBJECTS\n// ================\n// Try to load all the items of an array\n\n\nvar isArray = Array.isArray;\n\nfunction loadArrayData(ac, array, options) {\n  return Promise.all(array.map(function (data) {\n    return load(ac, data, options, data);\n  }));\n} // Try to load all the values of a key/value object\n\n\nfunction isObject(o) {\n  return o && typeof o === 'object';\n}\n\nfunction loadObjectData(ac, obj, options) {\n  var dest = {};\n  var promises = Object.keys(obj).map(function (key) {\n    if (options.only && options.only.indexOf(key) === -1) return null;\n    var value = obj[key];\n    return load(ac, value, options, value).then(function (audio) {\n      dest[key] = audio;\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return dest;\n  });\n} // Load the content of a JSON file\n\n\nvar isJsonFileName = fromRegex(/\\.json(\\?.*)?$/i);\n\nfunction loadJsonFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'text').then(JSON.parse), options);\n} // BASE64 ENCODED FORMATS\n// ======================\n// Load strings with Base64 encoded audio\n\n\nvar isBase64Audio = fromRegex(/^data:audio/);\n\nfunction loadBase64Audio(ac, source, options) {\n  var i = source.indexOf(',');\n  return load(ac, base64.decode(source.slice(i + 1)).buffer, options);\n} // Load .js files with MidiJS soundfont prerendered audio\n\n\nvar isJsFileName = fromRegex(/\\.js(\\?.*)?$/i);\n\nfunction loadMidiJSFile(ac, name, options) {\n  var url = prefix(options.from, name);\n  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options);\n} // convert a MIDI.js javascript soundfont file to json\n\n\nfunction midiJsToJson(data) {\n  var begin = data.indexOf('MIDI.Soundfont.');\n  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format');\n  begin = data.indexOf('=', begin) + 2;\n  var end = data.lastIndexOf(',');\n  return JSON.parse(data.slice(begin, end) + '}');\n}\n\nif (typeof module === 'object' && module.exports) module.exports = load;\nif (typeof window !== 'undefined') window.loadAudio = load;","import React, { useEffect, useState } from \"react\"\r\n\r\nconst PianoKey = ({ black, note, tone, ac, id, keyCode }) => {\r\n  const playOnKey = useKeyPress(keyCode)\r\n  function playSound() {\r\n    ac.playNote(`${note}${id + parseInt(tone)}`)\r\n  }\r\n\r\n  function useKeyPress(targetKey) {\r\n    // State for keeping track of whether key is pressed\r\n    const [keyPressed, setKeyPressed] = useState(false)\r\n\r\n    // If pressed key is our target key then set to true\r\n    function downHandler({ key }) {\r\n      if (key === targetKey) {\r\n        setKeyPressed(true)\r\n      }\r\n    }\r\n\r\n    // If released key is our target key then set to false\r\n    const upHandler = ({ key }) => {\r\n      if (key === targetKey) {\r\n        setKeyPressed(false)\r\n      }\r\n    }\r\n\r\n    // Add event listeners\r\n    useEffect(() => {\r\n      window.addEventListener(\"keydown\", downHandler)\r\n      window.addEventListener(\"keyup\", upHandler)\r\n      // Remove event listeners on cleanup\r\n      return () => {\r\n        window.removeEventListener(\"keydown\", downHandler)\r\n        window.removeEventListener(\"keyup\", upHandler)\r\n      }\r\n    }, []) // Empty array ensures that effect is only run on mount and unmount\r\n\r\n    return keyPressed\r\n  }\r\n\r\n  if (playOnKey) playSound()\r\n\r\n  return black ? (\r\n    <div onClick={playSound} className=\"black-keys-div \">\r\n      <div className={`black-key ${playOnKey ? \"black-key-active\" : \"\"}`}>\r\n        {note}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div\r\n      onClick={playSound}\r\n      className={`white-key ${playOnKey ? \"white-key-active\" : \"\"}`}\r\n    >\r\n      {note}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PianoKey\r\n","import SoundFontPlayer from \"soundfont-player\"\r\n\r\nconst NullSoundFontPlayerNoteAudio = {\r\n  stop() {},\r\n}\r\n\r\nconst NullSoundFontPlayer = {\r\n  play() {\r\n    return NullSoundFontPlayerNoteAudio\r\n  },\r\n}\r\nconst AudioPlayer = () => {\r\n  //Audio Context\r\n  const audioContext = new AudioContext()\r\n\r\n  //soundPlayer\r\n  let soundPlayer = NullSoundFontPlayer\r\n  //setInstrument\r\n  const Player = {\r\n    setInstrument(instrumentName) {\r\n      SoundFontPlayer.instrument(audioContext, instrumentName)\r\n        .then(soundfontPlayer => {\r\n          soundPlayer = soundfontPlayer\r\n        })\r\n        .catch(e => {\r\n          soundPlayer = NullSoundFontPlayer\r\n        })\r\n    },\r\n    playNote(note) {\r\n      soundPlayer.play(note)\r\n    },\r\n  }\r\n  return Player\r\n}\r\n\r\nexport default AudioPlayer\r\n","import React, { useState } from \"react\"\r\nimport PianoKey from \"../components/PianoKey\"\r\nimport AudioPlayer from \"../functions/AudioPlayer\"\r\n\r\nexport default function Home(props) {\r\n  const [size, setSize] = useState(1)\r\n  const [tone, setTone] = useState(3)\r\n\r\n  const audioPlayer = AudioPlayer()\r\n  audioPlayer.setInstrument(\"acoustic_grand_piano\")\r\n\r\n  const keyCodes = [\r\n    \"a\",\r\n    \"w\",\r\n    \"s\",\r\n    \"e\",\r\n    \"d\",\r\n    \"f\",\r\n    \"t\",\r\n    \"g\",\r\n    \"y\",\r\n    \"h\",\r\n    \"u\",\r\n    \"j\",\r\n    \"i\",\r\n    \"k\",\r\n  ]\r\n\r\n  function generateKeyboard() {\r\n    let keys = []\r\n    const setOfKeys = id => {\r\n      return [\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"a\" : \"\"}\r\n          id={id}\r\n          note={\"C\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"w\" : \"\"}\r\n          id={id}\r\n          note={\"C#\"}\r\n          black\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"s\" : \"\"}\r\n          id={id}\r\n          note={\"D\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"e\" : \"\"}\r\n          id={id}\r\n          note={\"D#\"}\r\n          black\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"d\" : \"\"}\r\n          id={id}\r\n          note={\"E\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"f\" : \"\"}\r\n          id={id}\r\n          note={\"F\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"t\" : \"\"}\r\n          id={id}\r\n          note={\"F#\"}\r\n          black\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"g\" : \"\"}\r\n          id={id}\r\n          note={\"G\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"y\" : \"\"}\r\n          id={id}\r\n          note={\"G#\"}\r\n          black\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"h\" : \"\"}\r\n          id={id}\r\n          note={\"A\"}\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"u\" : \"\"}\r\n          id={id}\r\n          note={\"A#\"}\r\n          black\r\n        />,\r\n        <PianoKey\r\n          ac={audioPlayer}\r\n          tone={tone}\r\n          keyCode={id == 1 ? \"j\" : \"\"}\r\n          id={id}\r\n          note={\"B\"}\r\n        />,\r\n      ]\r\n    }\r\n    for (let i = 0; i < size; i++) {\r\n      keys.push(setOfKeys(i + 1))\r\n    }\r\n\r\n    return keys\r\n  }\r\n\r\n  function keydownHandler(e) {\r\n    // if (e.key === \"a\") audioPlayer.playNote(`${note}${id + parseInt(tone)}`)\r\n  }\r\n\r\n  document.addEventListener(\"keydown\", keydownHandler)\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"options\">\r\n        <div>\r\n          <span className=\"label\">Size</span>\r\n          <select\r\n            onChange={e => {\r\n              setSize(e.target.value)\r\n            }}\r\n            name=\"size\"\r\n            id=\"size\"\r\n            value={size}\r\n          >\r\n            <option value={1}>12</option>\r\n            <option value={2}>24</option>\r\n            <option value={3}>36</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <span className=\"label\">Tone</span>\r\n          <select\r\n            onChange={e => {\r\n              setTone(e.target.value)\r\n            }}\r\n            name=\"size\"\r\n            id=\"size\"\r\n            value={tone}\r\n          >\r\n            <option value={1}>1</option>\r\n            <option value={2}>2</option>\r\n            <option value={3}>3</option>\r\n            <option value={4}>4</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"keys-div\">{generateKeyboard()}</div>\r\n    </div>\r\n  )\r\n}\r\n","'use strict';\n\nvar player = require('./player');\n\nvar events = require('./events');\n\nvar notes = require('./notes');\n\nvar scheduler = require('./scheduler');\n\nvar midi = require('./midi');\n\nfunction SamplePlayer(ac, source, options) {\n  return midi(scheduler(notes(events(player(ac, source, options)))));\n}\n\nif (typeof module === 'object' && module.exports) module.exports = SamplePlayer;\nif (typeof window !== 'undefined') window.SamplePlayer = SamplePlayer;","(function (e) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = e();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], e);\n  } else {\n    var t;\n\n    if (typeof window !== \"undefined\") {\n      t = window;\n    } else if (typeof global !== \"undefined\") {\n      t = global;\n    } else if (typeof self !== \"undefined\") {\n      t = self;\n    } else {\n      t = this;\n    }\n\n    t.midimessage = e();\n  }\n})(function () {\n  var e, t, s;\n  return function o(e, t, s) {\n    function a(n, i) {\n      if (!t[n]) {\n        if (!e[n]) {\n          var l = typeof require == \"function\" && require;\n          if (!i && l) return l(n, !0);\n          if (r) return r(n, !0);\n          var h = new Error(\"Cannot find module '\" + n + \"'\");\n          throw h.code = \"MODULE_NOT_FOUND\", h;\n        }\n\n        var c = t[n] = {\n          exports: {}\n        };\n        e[n][0].call(c.exports, function (t) {\n          var s = e[n][1][t];\n          return a(s ? s : t);\n        }, c, c.exports, o, e, t, s);\n      }\n\n      return t[n].exports;\n    }\n\n    var r = typeof require == \"function\" && require;\n\n    for (var n = 0; n < s.length; n++) {\n      a(s[n]);\n    }\n\n    return a;\n  }({\n    1: [function (e, t, s) {\n      \"use strict\";\n\n      Object.defineProperty(s, \"__esModule\", {\n        value: true\n      });\n\n      s[\"default\"] = function (e) {\n        function t(e) {\n          this._event = e;\n          this._data = e.data;\n          this.receivedTime = e.receivedTime;\n\n          if (this._data && this._data.length < 2) {\n            console.warn(\"Illegal MIDI message of length\", this._data.length);\n            return;\n          }\n\n          this._messageCode = e.data[0] & 240;\n          this.channel = e.data[0] & 15;\n\n          switch (this._messageCode) {\n            case 128:\n              this.messageType = \"noteoff\";\n              this.key = e.data[1] & 127;\n              this.velocity = e.data[2] & 127;\n              break;\n\n            case 144:\n              this.messageType = \"noteon\";\n              this.key = e.data[1] & 127;\n              this.velocity = e.data[2] & 127;\n              break;\n\n            case 160:\n              this.messageType = \"keypressure\";\n              this.key = e.data[1] & 127;\n              this.pressure = e.data[2] & 127;\n              break;\n\n            case 176:\n              this.messageType = \"controlchange\";\n              this.controllerNumber = e.data[1] & 127;\n              this.controllerValue = e.data[2] & 127;\n\n              if (this.controllerNumber === 120 && this.controllerValue === 0) {\n                this.channelModeMessage = \"allsoundoff\";\n              } else if (this.controllerNumber === 121) {\n                this.channelModeMessage = \"resetallcontrollers\";\n              } else if (this.controllerNumber === 122) {\n                if (this.controllerValue === 0) {\n                  this.channelModeMessage = \"localcontroloff\";\n                } else {\n                  this.channelModeMessage = \"localcontrolon\";\n                }\n              } else if (this.controllerNumber === 123 && this.controllerValue === 0) {\n                this.channelModeMessage = \"allnotesoff\";\n              } else if (this.controllerNumber === 124 && this.controllerValue === 0) {\n                this.channelModeMessage = \"omnimodeoff\";\n              } else if (this.controllerNumber === 125 && this.controllerValue === 0) {\n                this.channelModeMessage = \"omnimodeon\";\n              } else if (this.controllerNumber === 126) {\n                this.channelModeMessage = \"monomodeon\";\n              } else if (this.controllerNumber === 127) {\n                this.channelModeMessage = \"polymodeon\";\n              }\n\n              break;\n\n            case 192:\n              this.messageType = \"programchange\";\n              this.program = e.data[1];\n              break;\n\n            case 208:\n              this.messageType = \"channelpressure\";\n              this.pressure = e.data[1] & 127;\n              break;\n\n            case 224:\n              this.messageType = \"pitchbendchange\";\n              var t = e.data[2] & 127;\n              var s = e.data[1] & 127;\n              this.pitchBend = (t << 8) + s;\n              break;\n          }\n        }\n\n        return new t(e);\n      };\n\n      t.exports = s[\"default\"];\n    }, {}]\n  }, {}, [1])(1);\n});","module.exports = ADSR;\n\nfunction ADSR(audioContext) {\n  var node = audioContext.createGain();\n  var voltage = node._voltage = getVoltage(audioContext);\n  var value = scale(voltage);\n  var startValue = scale(voltage);\n  var endValue = scale(voltage);\n  node._startAmount = scale(startValue);\n  node._endAmount = scale(endValue);\n  node._multiplier = scale(value);\n\n  node._multiplier.connect(node);\n\n  node._startAmount.connect(node);\n\n  node._endAmount.connect(node);\n\n  node.value = value.gain;\n  node.startValue = startValue.gain;\n  node.endValue = endValue.gain;\n  node.startValue.value = 0;\n  node.endValue.value = 0;\n  Object.defineProperties(node, props);\n  return node;\n}\n\nvar props = {\n  attack: {\n    value: 0,\n    writable: true\n  },\n  decay: {\n    value: 0,\n    writable: true\n  },\n  sustain: {\n    value: 1,\n    writable: true\n  },\n  release: {\n    value: 0,\n    writable: true\n  },\n  getReleaseDuration: {\n    value: function value() {\n      return this.release;\n    }\n  },\n  start: {\n    value: function value(at) {\n      var target = this._multiplier.gain;\n      var startAmount = this._startAmount.gain;\n      var endAmount = this._endAmount.gain;\n\n      this._voltage.start(at);\n\n      this._decayFrom = this._decayFrom = at + this.attack;\n      this._startedAt = at;\n      var sustain = this.sustain;\n      target.cancelScheduledValues(at);\n      startAmount.cancelScheduledValues(at);\n      endAmount.cancelScheduledValues(at);\n      endAmount.setValueAtTime(0, at);\n\n      if (this.attack) {\n        target.setValueAtTime(0, at);\n        target.linearRampToValueAtTime(1, at + this.attack);\n        startAmount.setValueAtTime(1, at);\n        startAmount.linearRampToValueAtTime(0, at + this.attack);\n      } else {\n        target.setValueAtTime(1, at);\n        startAmount.setValueAtTime(0, at);\n      }\n\n      if (this.decay) {\n        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay));\n      }\n    }\n  },\n  stop: {\n    value: function value(at, isTarget) {\n      if (isTarget) {\n        at = at - this.release;\n      }\n\n      var endTime = at + this.release;\n\n      if (this.release) {\n        var target = this._multiplier.gain;\n        var startAmount = this._startAmount.gain;\n        var endAmount = this._endAmount.gain;\n        target.cancelScheduledValues(at);\n        startAmount.cancelScheduledValues(at);\n        endAmount.cancelScheduledValues(at);\n        var expFalloff = getTimeConstant(this.release); // truncate attack (required as linearRamp is removed by cancelScheduledValues)\n\n        if (this.attack && at < this._decayFrom) {\n          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at);\n          target.linearRampToValueAtTime(valueAtTime, at);\n          startAmount.linearRampToValueAtTime(1 - valueAtTime, at);\n          startAmount.setTargetAtTime(0, at, expFalloff);\n        }\n\n        endAmount.setTargetAtTime(1, at, expFalloff);\n        target.setTargetAtTime(0, at, expFalloff);\n      }\n\n      this._voltage.stop(endTime);\n\n      return endTime;\n    }\n  },\n  onended: {\n    get: function get() {\n      return this._voltage.onended;\n    },\n    set: function set(value) {\n      this._voltage.onended = value;\n    }\n  }\n};\nvar flat = new Float32Array([1, 1]);\n\nfunction getVoltage(context) {\n  var voltage = context.createBufferSource();\n  var buffer = context.createBuffer(1, 2, context.sampleRate);\n  buffer.getChannelData(0).set(flat);\n  voltage.buffer = buffer;\n  voltage.loop = true;\n  return voltage;\n}\n\nfunction scale(node) {\n  var gain = node.context.createGain();\n  node.connect(gain);\n  return gain;\n}\n\nfunction getTimeConstant(time) {\n  return Math.log(time + 1) / Math.log(100);\n}\n\nfunction getValue(start, end, fromTime, toTime, at) {\n  var difference = end - start;\n  var time = toTime - fromTime;\n  var truncateTime = at - fromTime;\n  var phase = truncateTime / time;\n  var value = start + phase * difference;\n\n  if (value <= start) {\n    value = start;\n  }\n\n  if (value >= end) {\n    value = end;\n  }\n\n  return value;\n}","/* global XMLHttpRequest */\n'use strict';\n/**\n * Given a url and a return type, returns a promise to the content of the url\n * Basically it wraps a XMLHttpRequest into a Promise\n *\n * @param {String} url\n * @param {String} type - can be 'text' or 'arraybuffer'\n * @return {Promise}\n */\n\nmodule.exports = function (url, type) {\n  return new Promise(function (done, reject) {\n    var req = new XMLHttpRequest();\n    if (type) req.responseType = type;\n    req.open('GET', url);\n\n    req.onload = function () {\n      req.status === 200 ? done(req.response) : reject(Error(req.statusText));\n    };\n\n    req.onerror = function () {\n      reject(Error('Network Error'));\n    };\n\n    req.send();\n  });\n};","'use strict';\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/;\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\n\nfunction regex() {\n  return REGEX;\n}\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11];\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true if the note is the tonic of something.\n * If true, en extra tonicOf property is returned. It's false by default.\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n * Can detect pitch class enhramonics.\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\n\nfunction parse(str, isTonic, tuning) {\n  if (typeof str !== 'string') return null;\n  var m = REGEX.exec(str);\n  if (!m || !isTonic && m[4]) return null;\n  var p = {\n    letter: m[1].toUpperCase(),\n    acc: m[2].replace(/x/g, '##')\n  };\n  p.pc = p.letter + p.acc;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length;\n  p.chroma = SEMITONES[p.step] + p.alt;\n\n  if (m[3]) {\n    p.oct = +m[3];\n    p.midi = p.chroma + 12 * (p.oct + 1);\n    p.freq = midiToFreq(p.midi, tuning);\n  }\n\n  if (isTonic) p.tonicOf = m[4];\n  return p;\n}\n/**\n * Given a midi number, return its frequency\n * @param {Integer} midi - midi note number\n * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)\n * @return {Float} frequency in hertzs\n */\n\n\nfunction midiToFreq(midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440);\n}\n\nvar parser = {\n  parse: parse,\n  regex: regex,\n  midiToFreq: midiToFreq\n};\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq'];\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src);\n    return p && typeof p[name] !== 'undefined' ? p[name] : null;\n  };\n});\nmodule.exports = parser; // extra API docs\n\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String} note - the note name\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n */\n\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n */","/* global AudioBuffer */\n'use strict';\n\nvar ADSR = require('adsr');\n\nvar EMPTY = {};\nvar DEFAULTS = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.1,\n  sustain: 0.9,\n  release: 0.3,\n  loop: false,\n  cents: 0,\n  loopStart: 0,\n  loopEnd: 0\n};\n/**\n * Create a sample player.\n *\n * @param {AudioContext} ac - the audio context\n * @param {ArrayBuffer|Object<String,ArrayBuffer>} source\n * @param {Onject} options - (Optional) an options object\n * @return {player} the player\n * @example\n * var SamplePlayer = require('sample-player')\n * var ac = new AudioContext()\n * var snare = SamplePlayer(ac, <AudioBuffer>)\n * snare.play()\n */\n\nfunction SamplePlayer(ac, source, options) {\n  var connected = false;\n  var nextId = 0;\n  var tracked = {};\n  var out = ac.createGain();\n  out.gain.value = 1;\n  var opts = Object.assign({}, DEFAULTS, options);\n  /**\n   * @namespace\n   */\n\n  var player = {\n    context: ac,\n    out: out,\n    opts: opts\n  };\n  if (source instanceof AudioBuffer) player.buffer = source;else player.buffers = source;\n  /**\n   * Start a sample buffer.\n   *\n   * The returned object has a function `stop(when)` to stop the sound.\n   *\n   * @param {String} name - the name of the buffer. If the source of the\n   * SamplePlayer is one sample buffer, this parameter is not required\n   * @param {Float} when - (Optional) when to start (current time if by default)\n   * @param {Object} options - additional sample playing options\n   * @return {AudioNode} an audio node with a `stop` function\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   * sample.start()\n   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer\n   * @example\n   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)\n   * drums.start('snare')\n   * drums.start('snare', 0, { gain: 0.3 })\n   */\n\n  player.start = function (name, when, options) {\n    // if only one buffer, reorder arguments\n    if (player.buffer && name !== null) return player.start(null, name, when);\n    var buffer = name ? player.buffers[name] : player.buffer;\n\n    if (!buffer) {\n      console.warn('Buffer ' + name + ' not found.');\n      return;\n    } else if (!connected) {\n      console.warn('SamplePlayer not connected to any node.');\n      return;\n    }\n\n    var opts = options || EMPTY;\n    when = Math.max(ac.currentTime, when || 0);\n    player.emit('start', when, name, opts);\n    var node = createNode(name, buffer, opts);\n    node.id = track(name, node);\n    node.env.start(when);\n    node.source.start(when);\n    player.emit('started', when, node.id, node);\n    if (opts.duration) node.stop(when + opts.duration);\n    return node;\n  }; // NOTE: start will be override so we can't copy the function reference\n  // this is obviously not a good design, so this code will be gone soon.\n\n  /**\n   * An alias for `player.start`\n   * @see player.start\n   * @since 0.3.0\n   */\n\n\n  player.play = function (name, when, options) {\n    return player.start(name, when, options);\n  };\n  /**\n   * Stop some or all samples\n   *\n   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime\n   * if not specified)\n   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop\n   * @return {Array} an array of ids of the stoped samples\n   *\n   * @example\n   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)\n   * longSound.start(ac.currentTime)\n   * longSound.start(ac.currentTime + 1)\n   * longSound.start(ac.currentTime + 2)\n   * longSound.stop(ac.currentTime + 3) // stop the three sounds\n   */\n\n\n  player.stop = function (when, ids) {\n    var node;\n    ids = ids || Object.keys(tracked);\n    return ids.map(function (id) {\n      node = tracked[id];\n      if (!node) return null;\n      node.stop(when);\n      return node.id;\n    });\n  };\n  /**\n   * Connect the player to a destination node\n   *\n   * @param {AudioNode} destination - the destination node\n   * @return {AudioPlayer} the player\n   * @chainable\n   * @example\n   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)\n   */\n\n\n  player.connect = function (dest) {\n    connected = true;\n    out.connect(dest);\n    return player;\n  };\n\n  player.emit = function (event, when, obj, opts) {\n    if (player.onevent) player.onevent(event, when, obj, opts);\n    var fn = player['on' + event];\n    if (fn) fn(when, obj, opts);\n  };\n\n  return player; // =============== PRIVATE FUNCTIONS ============== //\n\n  function track(name, node) {\n    node.id = nextId++;\n    tracked[node.id] = node;\n\n    node.source.onended = function () {\n      var now = ac.currentTime;\n      node.source.disconnect();\n      node.env.disconnect();\n      node.disconnect();\n      player.emit('ended', now, node.id, node);\n    };\n\n    return node.id;\n  }\n\n  function createNode(name, buffer, options) {\n    var node = ac.createGain();\n    node.gain.value = 0; // the envelope will control the gain\n\n    node.connect(out);\n    node.env = envelope(ac, options, opts);\n    node.env.connect(node.gain);\n    node.source = ac.createBufferSource();\n    node.source.buffer = buffer;\n    node.source.connect(node);\n    node.source.loop = options.loop || opts.loop;\n    node.source.playbackRate.value = centsToRate(options.cents || opts.cents);\n    node.source.loopStart = options.loopStart || opts.loopStart;\n    node.source.loopEnd = options.loopEnd || opts.loopEnd;\n\n    node.stop = function (when) {\n      var time = when || ac.currentTime;\n      player.emit('stop', time, name);\n      var stopAt = node.env.stop(time);\n      node.source.stop(stopAt);\n    };\n\n    return node;\n  }\n}\n\nfunction isNum(x) {\n  return typeof x === 'number';\n}\n\nvar PARAMS = ['attack', 'decay', 'sustain', 'release'];\n\nfunction envelope(ac, options, opts) {\n  var env = ADSR(ac);\n  var adsr = options.adsr || opts.adsr;\n  PARAMS.forEach(function (name, i) {\n    if (adsr) env[name] = adsr[i];else env[name] = options[name] || opts[name];\n  });\n  env.value.value = isNum(options.gain) ? options.gain : isNum(opts.gain) ? opts.gain : 1;\n  return env;\n}\n/*\n * Get playback rate for a given pitch change (in cents)\n * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):\n * f2 = f1 * 2^( C / 1200 )\n */\n\n\nfunction centsToRate(cents) {\n  return cents ? Math.pow(2, cents / 1200) : 1;\n}\n\nmodule.exports = SamplePlayer;","'use strict'; // util\n\nfunction fillStr(s, num) {\n  return Array(num + 1).join(s);\n}\n\nfunction isNum(x) {\n  return typeof x === 'number';\n}\n\nfunction isStr(x) {\n  return typeof x === 'string';\n}\n\nfunction isDef(x) {\n  return typeof x !== 'undefined';\n}\n\nfunction midiToFreq(midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440);\n}\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/;\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\n\nexport function regex() {\n  return REGEX;\n}\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11];\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true the strings it's supposed to contain a note number\n * and some category (for example an scale: 'C# major'). It's false by default,\n * but when true, en extra tonicOf property is returned with the category ('major')\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics\n * since, for example, chroma of 'Cb' and 'B' are both 11\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\n\nexport function parse(str, isTonic, tuning) {\n  if (typeof str !== 'string') return null;\n  var m = REGEX.exec(str);\n  if (!m || !isTonic && m[4]) return null;\n  var p = {\n    letter: m[1].toUpperCase(),\n    acc: m[2].replace(/x/g, '##')\n  };\n  p.pc = p.letter + p.acc;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length;\n  var pos = SEMITONES[p.step] + p.alt;\n  p.chroma = pos < 0 ? 12 + pos : pos % 12;\n\n  if (m[3]) {\n    // has octave\n    p.oct = +m[3];\n    p.midi = pos + 12 * (p.oct + 1);\n    p.freq = midiToFreq(p.midi, tuning);\n  }\n\n  if (isTonic) p.tonicOf = m[4];\n  return p;\n}\nvar LETTERS = 'CDEFGAB';\n\nfunction accStr(n) {\n  return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n);\n}\n\nfunction octStr(n) {\n  return !isNum(n) ? '' : '' + n;\n}\n/**\n * Create a string from a parsed object or `step, alteration, octave` parameters\n * @param {Object} obj - the parsed data object\n * @return {String} a note string or null if not valid parameters\n * @since 1.2\n * @example\n * parser.build(parser.parse('cb2')) // => 'Cb2'\n *\n * @example\n * // it accepts (step, alteration, octave) parameters:\n * parser.build(3) // => 'F'\n * parser.build(3, -1) // => 'Fb'\n * parser.build(3, -1, 4) // => 'Fb4'\n */\n\n\nexport function build(s, a, o) {\n  if (s === null || typeof s === 'undefined') return null;\n  if (s.step) return build(s.step, s.alt, s.oct);\n  if (s < 0 || s > 6) return null;\n  return LETTERS.charAt(s) + accStr(a) + octStr(o);\n}\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String|Integer} note - the note name or midi number\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n * @example\n * // midi numbers are bypassed (even as strings)\n * parser.midi(60) // => 60\n * parser.midi('60') // => 60\n */\n\nexport function midi(note) {\n  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note;\n  var p = parse(note);\n  return p && isDef(p.midi) ? p.midi : null;\n}\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name or note midi number\n * @param {String} tuning - (Optional) the A4 frequency (440 by default)\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n * @example\n * // can change tuning (440 by default)\n * parser.freq('A4', 444) // => 444\n * parser.freq('A3', 444) // => 222\n * @example\n * // it accepts midi numbers (as numbers and as strings)\n * parser.freq(69) // => 440\n * parser.freq('69', 442) // => 442\n */\n\nexport function freq(note, tuning) {\n  var m = midi(note);\n  return m === null ? null : midiToFreq(m, tuning);\n}\nexport function letter(src) {\n  return (parse(src) || {}).letter;\n}\nexport function acc(src) {\n  return (parse(src) || {}).acc;\n}\nexport function pc(src) {\n  return (parse(src) || {}).pc;\n}\nexport function step(src) {\n  return (parse(src) || {}).step;\n}\nexport function alt(src) {\n  return (parse(src) || {}).alt;\n}\nexport function chroma(src) {\n  return (parse(src) || {}).chroma;\n}\nexport function oct(src) {\n  return (parse(src) || {}).oct;\n}","'use strict'; // DECODE UTILITIES\n\nfunction b64ToUint6(nChr) {\n  return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;\n} // Decode Base64 to Uint8Array\n// ---------------------------\n\n\nfunction decode(sBase64, nBlocksSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n  var nInLen = sB64Enc.length;\n  var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;\n  var taBytes = new Uint8Array(nOutLen);\n\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3;\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n      }\n\n      nUint24 = 0;\n    }\n  }\n\n  return taBytes;\n}\n\nmodule.exports = {\n  decode: decode\n};"],"sourceRoot":""}